	[comment encoding = UTF-8 /]
[**
 * The documentation of the module generate.
 */]
[module UID('http://uid/1.0')]

[**
 * The documentation of the template generateElement.
 * @param anApp
 */]
[template public generateElement(anApp : Application)]
[comment @main/]

[generateButton()/]
[generateSwitch()/]
[generateMatrix()/]
[generateRegulator()/]
[generateDisplay()/]

[comment Stages/]
[for (stage : Stage| anApp.hasViews.hasStage->select(oclIsTypeOf(Stage)))]
	[generateStage(stage)/]
[/for] 

[comment Mediators/]
[for (mediator : Mediator| anApp.hasViews.hasMediator->select(oclIsTypeOf(Mediator)))]
[/for] 

[comment Controllers/]
[for (command : Command| anApp.hasControllers.hasCommand->select(oclIsTypeOf(Command)))]
[/for] 

[comment Notifications/]
[for (notification : Notification| anApp.hasNotifications.hasNotification->select(oclIsTypeOf(Notification)))]
[/for] 


[file ('main.lua', false, 'UTF-8')]
	
[/file]

[/template]


[template public generateStage(stage : Stage)]
[file ('/view/stage_'+stage.name.toString().toLowerCase()+'.lua', false, 'UTF-8')]
[stage.name.toString().toLowerFirst()/] = {}

function [stage.name.toString().toLowerFirst()/]:new (parentGroup)
	local view = RNGroup:new()
  	view.classType = "[stage.name.toString().toLowerFirst()/]"

	[comment Funktionen generiert durch die in den Komponenten hinterlegten Events/]
	[generateStageComponentEventFunction(stage)/]

	[generateStageComponentInits(stage)/]

	[generateStageDestroy(stage)/]

	view:init()
	return view
end
return [stage.name.toString().toLowerFirst()/]
[/file]
[/template]


[template public generateStageComponentEventFunction(stage : Stage)]
[comment Button Event-Listener/]
[for (button : Button| stage.hasButton->select(oclIsTypeOf(Button)))]
	[for (event : Event| button.hasEvents->select(oclIsTypeOf(Event)))]
	function view:[button.name.toString().toLowerCase()/]_[event.name.toString().toLowerCase()/](event)    
		[for (notification : Notification| event.sendsNotification->select(oclIsTypeOf(Notification)))]
		Runtime:dispatchEvent({name="[notification.name.toLowerCase()/]"})
		[/for] 
	end
	[/for] 
[/for] 
[/template]

[template public generateStageComponentInits(stage : Stage)]
	function view:init()
	[comment init Buttons/]
	[for (button : Button| stage.hasButton->select(oclIsTypeOf(Button)))]
		self.[button.name.toString().toLowerCase()/] = RNFactory.createButton ( 
			[if (button.image_off <> null)] [button.image_off/] [else]"button_off.png"[/if]
			, {
			imageOver = [if (button.image_on <> null)] [button.image_on/] [else]"button_over.png" [/if],
	  		imageDisabled = [if (button.image_disabled <> null)] [button.image_disabled/] [else]"button_disabled.png" [/if],
	[for (event : Event| button.hasEvents->select(oclIsTypeOf(Event)))]
			[event.callback/] = self.[button.name.toString().toLowerCase()/]_[event.name.toString().toLowerCase()/],
	[/for] 	
			font = "arial.ttf",
			width = 200,
			height = 50,
			left = [button.x/],
			top = [button.y/]
	 	})
	[/for] 
		Runtime:dispatchEvent({name="onRobotlegsViewCreated", target=self})
	end
[/template]

[template public generateStageDestroy(stage : Stage)]
	function view:destroy()
	[for (button : Button| stage.hasButton->select(oclIsTypeOf(Button)))]
		self.[button.name.toString().toLowerCase()/]:remove()
	[/for] 
		Runtime:dispatchEvent({name="onRobotlegsViewDestroyed", target=self})
		self:removeSelf()
	end
[/template]
	






[template public generateButton()]
[file ('/view/view_button.lua', false, 'UTF-8')]
local button = {}
local button_mt = { __index = button }

function button:new ()
	button.image_on = "buttonOn.png"
	button.image_off = "buttonOff.png"
	button.image_disabled = "buttonDisabled.png"
    button.notification_pressed = "notify_buttonPressed"
    button.notification_released = "notify_buttonReleased"
    return setmetatable( button, button_mt )
end
[/file]
[/template]

[template public generateSwitch()]
[file ('/view/view_switch.lua', false, 'UTF-8')]

function switch:new ()
	thisButton = button:new()
    thisButton.value = false
    return thisButton
end
[/file]
[/template]

[template public generateMatrix()]
[file ('/view/view_matrix.lua', false, 'UTF-8')]
local matrix = {}
local matrix_mt = { __index = matrix }

function matrix:new ()
	matrix.image_background = "backgroundImage.png"
	matrix.image_tap = "tapImage.png"
	matrix.image_doubleTap = "doubleTapImage.png"

    matrix.notification_tap = "notify_tap"
	matrix.notification_doubleTap = "notify_doubleTap"
    matrix.notification_moveSingleTouch = "notify_moveSingleTouch"
	matrix.notification_moveMultiTouch = "notify_moveMultiTouch"
    return setmetatable( matrix, matrix_mt )
end
[/file]
[/template]

[template public generateRegulator()]
[file ('/view/view_regulator.lua', false, 'UTF-8')]
local regulator = {}
local regulator_mt = { __index = regulator }

function regulator:new ()
	regulator.minValue = 0.0
	regulator.maxValue = 1.0
	regulator.value = 0.0
    regulator.defaultValue = 0.0

    regulator.notification_changed = "notify_changed"
	regulator.notification_doubleTap = "notify_doubleTap"
    return setmetatable( regulator, regulator_mt )
end
[/file]
[/template]

[template public generateDisplay()]
[file ('/view/view_display.lua', false, 'UTF-8')]
local display = {}
local display_mt = { __index = display }

function display:new ()
	display.image_background = "backgroundImage.png"
	display.value = 0.0

    return setmetatable( display, display_mt )
end
[/file]
[/template]

[query public getBrackets() : String = '[]'/]